#1장 프로그램을 명확하고 정확하고 유용하고 견고하고 유연하고 관리하기 쉽게

#2장 객체 생성과 파괴

##생성자 대신 정적 팩터리 메서드를 고려하라**

###정적팩터리매서드가 생성자 보다 좋은 5가지 이유

1. 이름을 가질 수 있다.

2.호출될 때마다 인스턴스를 새로 생성하지 않아도 된다.

- 불필요한 객체 생성을 피할 수 있다.

3. 반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다.

4. 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.

5. 정적팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.

###단점

1. 상속을 하려면 public이나 protected 생성자가 필요하니 정적 팩터리 메서드만 제공하면 하위클래스를 만들 수 없다.

2. 정적 팩터리 메서드는 프로그래머가 찾기 어렵다.

--
정적 팩커리 메서드에 흔히 사용하는 명명 방식

  - from : 매개변수를 하나 받아서 해당 타입의 인스턴스를 반환하는 형변환 메서드
  - valueOf : from과 of의 더 자세한 버전
  - instance 혹은 getInstance : 매개변수로 명시한 인스턴스를 반환하지만, 같은 인스턴스임을 보장하지는 않는다.
  - create 혹은 newInstance : instance 혹은 getInstance와 같지만 매번 새로운 인스턴스를 생성해 반환함을 보장한다.
  - getType : getInstance와 같으나, 생성할 클래스가 아닌 다른 클래스에 팩터리 메서드를 정의할 때 쓴다. "Type"은 팩터리 메서드가 반환할 객체의 타입이다.
    ex) FileStore fs = Files.getFileStore(path)
  - newType : newInstance와 같으나, 생성할 클래스가 아닌 다른 클래스에 팩커리 메서드를 정의하 때 쓴다. "Type"은 팩터리 메서드가 반환할 객체의 타입이다.
  - type : getType과 newType의 간결한 버전
    ex) List<Complaint> litany = Collections.list(legacyLitany);
-- 

## 생성
